{"version":3,"sources":["serviceWorker.js","components/MenuBar.js","components/Home.js","components/Login.js","components/Register.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","stackable","size","Item","active","onClick","as","Link","to","FETCH_POSTS_QUERY","gql","Home","useQuery","data","loading","console","log","Login","Register","App","Container","exact","component","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+EC+BSC,MA7Cf,WAEE,IAAMC,EAAWL,OAAOC,SAASI,SAC3BC,EAAoB,MAAbD,EAAmB,OAASA,EAASE,OAAO,GAHxC,EAImBC,mBAASF,GAJ5B,mBAIVG,EAJU,KAIEC,EAJF,KAQXC,EAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiBH,EAAcG,IAEvD,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,WACnB,kBAACF,EAAA,EAAKG,KAAN,CACEJ,KAAK,OACLK,OAAuB,SAAfT,EACRU,QAASR,EACTS,GAAIC,IACJC,GAAG,KALL,QAUA,kBAACR,EAAA,EAAKG,KAAN,CACEJ,KAAK,QACLK,OAAuB,UAAfT,EACRU,QAASR,EACTS,GAAIC,IACJC,GAAG,UALL,SAUA,kBAACR,EAAA,EAAKG,KAAN,CACEJ,KAAK,WACLK,OAAuB,aAAfT,EACRU,QAASR,EACTS,GAAIC,IACJC,GAAG,aALL,c,iWCnBN,IAAMC,E,MAAoBC,GAAH,KAsBRC,EAnCf,WAAiB,IAAD,EACYC,mBAASH,GAAlBI,GADH,EACNC,QADM,EACGD,MAKjB,OAHIA,GACFE,QAAQC,IAAIH,GAGZ,6BACE,2CCFSI,MARf,WACE,OACE,6BACE,4CCKSC,MARf,WACE,OACE,6BACE,+CCoBSC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAAC7B,KAAK,IAAI8B,UAAWX,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAAC7B,KAAK,SAAS8B,UAAWL,IACtC,kBAAC,IAAD,CAAOI,OAAK,EAAC7B,KAAK,YAAY8B,UAAWJ,O,2BCZ3CK,EAAWC,YAAe,CAC9BC,IAAK,0BAGDC,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,MAIX,oBAAC,iBAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OCdJK,IAASC,OAAOC,EAAgBC,SAASC,eAAe,SP+HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.eba9078b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nfunction MenuBar() {\n  // state = {}\n  const pathname = window.location.pathname\n  const path = pathname === '/' ? 'home' : pathname.substr(1)\n  const [activeItem, setActiveItem] = useState(path)\n\n  // handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  const handleItemClick = (e, { name }) => setActiveItem(name)\n\n  return (\n    <Menu stackable size=\"massive\">\n      <Menu.Item\n        name='home'\n        active={activeItem === 'home'}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      >\n        Home\n        </Menu.Item>\n\n      <Menu.Item\n        name='login'\n        active={activeItem === 'login'}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/login\"\n      >\n        Login\n        </Menu.Item>\n\n      <Menu.Item\n        name='register'\n        active={activeItem === 'register'}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/register\"\n      >\n        Register\n        </Menu.Item>\n    </Menu>\n  )\n}\n\nexport default MenuBar\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag'\n\nfunction Home() {\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY)\n\n  if (data) {\n    console.log(data)\n  }\n  return (\n    <div>\n      <h1>Home Page</h1>\n    </div>\n  )\n}\n\nconst FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`\n\nexport default Home\n","import React from 'react'\n\nfunction Login() {\n  return (\n    <div>\n      <h1>Login Page</h1>\n    </div>\n  )\n}\n\nexport default Login\n","import React from 'react'\n\nfunction Register() {\n  return (\n    <div>\n      <h1>Register Page</h1>\n    </div>\n  )\n}\n\nexport default Register\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\n\nimport MenuBar from './components/MenuBar'\nimport Home from './components/Home'\nimport Login from './components/Login'\nimport Register from './components/Register'\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <MenuBar />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/register\" component={Register} />\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport App from './App'\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createHttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:5000'\n})\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n})\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n)\n","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}